// Generated by CoffeeScript 1.9.3
(function() {
  var Traffic;

  Traffic = (function() {
    function Traffic(costmap) {
      var date, day, dayMult, hours, hoursMult, i, j, ref;
      this.costmap = costmap;
      date = new Date();
      day = date.getDay();
      hours = date.getHours();
      console.log(day);
      console.log(hours);
      if (day === 0 || day === 6) {
        dayMult = 2;
      } else {
        dayMult = 1;
      }
      hoursMult = hours;
      if (hours > 12) {
        for (i = j = 1, ref = hours - 12; 1 <= ref ? j < ref : j > ref; i = 1 <= ref ? ++j : --j) {
          hoursMult--;
        }
      }
      this.numObstacles = hoursMult * dayMult;
      this.obstacles = [];
    }

    Traffic.prototype.generateUniform = function() {
      var count, numThrows, obs, results;
      count = 0;
      numThrows = 0;
      results = [];
      while (count < this.numObstacles) {
        obs = this.throwDice();
        console.log("Generated: " + obs.x + ", " + obs.y);
        if (this.costmap.isFreeSpace(obs.x, obs.y)) {
          this.obstacles.push(obs);
          count++;
        }
        if (numThrows > 100) {
          break;
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Traffic.prototype.updateTraffic = function() {
      var isUpdated, j, len, numThrows, obs, ref, results, x, y;
      ref = this.obstacles;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        obs = ref[j];
        isUpdated = false;
        numThrows = 0;
        results.push((function() {
          var results1;
          results1 = [];
          while (isUpdated === false) {
            x = Math.floor(Math.random() * 8) - 4;
            y = Math.floor(Math.random() * 8) - 4;
            if (this.costmap.isFreeSpace(obs.x, obs.y)) {
              obs.x += x;
              obs.y += y;
              isUpdated = true;
            }
            numThrows++;
            if (numThrows > 100) {
              break;
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Traffic.prototype.throwDice = function() {
      var obs;
      obs = {
        x: Math.floor(Math.random() * this.costmap.rows),
        y: Math.floor(Math.random() * this.costmap.cols)
      };
      return obs;
    };

    Traffic.prototype.toString = function() {
      var j, len, obs, ref, str;
      str = "---------- Traffic ----------\n";
      ref = this.obstacles;
      for (j = 0, len = ref.length; j < len; j++) {
        obs = ref[j];
        str += obs.x + ", " + obs.y + "\n";
      }
      str += "---------- Traffic ----------\n";
      return str;
    };

    return Traffic;

  })();

  if (typeof module !== "undefined" && module.exports) {
    exports.Traffic = Traffic;
  } else {
    window.Traffic = Traffic;
  }

}).call(this);

//# sourceMappingURL=Traffic.js.map
