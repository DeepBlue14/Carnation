// Generated by CoffeeScript 1.9.3

/*
 * File:   Image.coffee
 * Author: James Kuczynski
 * File Description: Contains the Image class.
 * Ref: https://github.com/lukeapage/pngjs/tree/master/examples
 * Last Modified: 10/02/2018
 */

(function() {
  var Image, PNG, fs;

  fs = require('fs');

  PNG = require('pngjs').PNG;

  Image = (function() {
    Image.header = 'null';

    Image.done = false;

    function Image(filename) {
      this.dataf = fs.readFileSync(filename);
      this.png = PNG.sync.read(this.dataf, {
        filterType: -1
      });
      this.data = this.png.data;
      this.width = this.png.width;
      this.height = this.png.height;
      this.cols = this.png.height;
      this.rows = this.png.width;
    }

    Image.prototype.zeros = function() {
      var color, results, x, y;
      y = 0;
      results = [];
      while (y < this.height) {
        x = 0;
        while (x < this.width) {
          color = this.getAt(x, y);
          this.setAt2(x, y, 0, 0, 0, 255);
          x++;
        }
        results.push(y++);
      }
      return results;
    };

    Image.prototype.getAt = function(x, y) {
      var color, idx;
      idx = this.index2OneD(x, y);
      color = {
        r: this.data[idx],
        g: this.data[idx + 1],
        b: this.data[idx + 2],
        a: this.data[idx + 3]
      };
      return color;
    };

    Image.prototype.setAt1 = function(x, y, color) {
      var idx;
      idx = this.index2OneD(x, y);
      this.data[idx] = color.r;
      this.data[idx + 1] = color.g;
      this.data[idx + 2] = color.b;
      return this.data[idx + 3] = color.a;
    };

    Image.prototype.setAt2 = function(x, y, r, g, b, a) {
      var color;
      if (a == null) {
        a = 255;
      }
      color = {
        r: r,
        g: g,
        b: b,
        a: a
      };
      return this.setAt1(x, y, color);
    };

    Image.prototype.isFreeSpace = function(x, y) {
      return true;
    };

    Image.prototype.index2OneD = function(x, y) {
      return (this.width * y + x) << 2;
    };

    Image.prototype.index2TwoD = function(i) {
      var xy;
      xy = {
        x: i % this.width,
        y: i / this.width
      };
      return xy;
    };

    Image.prototype.saveAsync = function(filename) {
      var idx, tmp, x, y;
      tmp = new PNG({
        width: this.png.width,
        height: this.png.height,
        filterType: -1
      });
      console.log(tmp.width + ", " + tmp.height);
      y = 0;
      while (y < tmp.height) {
        x = 0;
        while (x < tmp.width) {
          idx = (tmp.width * y + x) << 2;
          tmp.data[idx] = this.data[idx];
          tmp.data[idx + 1] = this.data[idx + 1];
          tmp.data[idx + 2] = this.data[idx + 2];
          tmp.data[idx + 3] = this.data[idx + 3];
          x++;
        }
        y++;
      }
      return tmp.pack().pipe(fs.createWriteStream(filename).on('finish', function() {
        console.log('Written!');
      }));
    };

    Image.prototype.toString = function() {
      return 'Method stub';
    };

    return Image;

  })();

  if (typeof module !== "undefined" && module.exports) {
    exports.Image = Image;
  } else {
    window.Image = Image;
  }

}).call(this);

//# sourceMappingURL=Image.js.map
