// Generated by CoffeeScript 1.9.3
(function() {
  var SearchAbc, SearchNode;

  SearchNode = require('./SearchNode.coffee');

  SearchAbc = (function() {
    SearchAbc.MAGIC_NUM_1;

    SearchAbc.MAGIC_NUM_2;


    /*
     * Initialize the class
     * @param MAGIC_NUM_1: Constant used in the heuristic
     * @param MAGIC_NUM_2: Constant used in the heuristic
     */

    function SearchAbc(MAGIC_NUM_1, MAGIC_NUM_2) {
      this.MAGIC_NUM_1 = MAGIC_NUM_1;
      this.MAGIC_NUM_2 = MAGIC_NUM_2;
    }

    SearchAbc.prototype.minF = function(lst) {
      var currMinF, currMinIdx, i, j, len, value;
      currMinIdx = 0;
      currMinF = 1000000;
      for (i = j = 0, len = lst.length; j < len; i = ++j) {
        value = lst[i];
        if (lst[i].f < currMinF) {
          currMinF = lst[i].f;
          currMinIdx = i;
        }
      }
      return currMinIdx;
    };

    SearchAbc.prototype.calcRawDistance = function(node1, node2) {
      var dx, dy, result;
      dx = Math.abs(node1.x - node2.x);
      dy = Math.abs(node1.y - node2.y);
      result = dx + dy;
      return result;
    };

    SearchAbc.prototype.calcLinearDistance = function(node1, node2) {
      var dx, dy, result;
      dx = Math.abs(node1.x - node2.x);
      dy = Math.abs(node1.y - node2.y);
      result = (dx + dy) / 2.0;
      return result;
    };

    SearchAbc.prototype.calcManhattenDistance = function(node1, node2) {
      var dx, dy, result;
      dx = Math.abs(node1.x - node2.x);
      dy = Math.abs(node1.y - node2.y);
      result = 0;
      if (dx > dy) {
        result = this.MAGIC_NUM_1 * dy + this.MAGIC_NUM_2 * (dx - dy);
      } else {
        result = this.MAGIC_NUM_1 * dx + this.MAGIC_NUM_2 * (dy - dx);
      }
      return result;
    };

    SearchAbc.prototype.calcDiagonalDistance = function(node1, node2) {
      var dx, dy, result;
      dx = Math.abs(node1.x - node2.x);
      dy = Math.abs(node1.y - node2.y);
      result = 0;
      if (dx > dy) {
        result = this.MAGIC_NUM_1 * (dx - dy) + this.MAGIC_NUM_2 * dy;
      } else {
        result = this.MAGIC_NUM_1 * (dy - dx) + this.MAGIC_NUM_2 * dx;
      }
      return result;
    };

    SearchAbc.prototype.getSuccessors = function(node) {};

    SearchAbc.prototype.display = function(openLst, closedLst, start, goal) {};

    SearchAbc.prototype.display = function(lastNode, openLst, closedLst, start, goal) {};

    return SearchAbc;

  })();

  if (typeof module !== "undefined" && module.exports) {
    exports.SearchAbc = SearchAbc;
  } else {
    window.SearchAbc = SearchAbc;
  }

}).call(this);

//# sourceMappingURL=SearchAbc.js.map
