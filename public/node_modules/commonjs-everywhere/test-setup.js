// Generated by CoffeeScript 1.9.3
(function() {
  var FIXTURES_DIR, arrayEgal, bundle, egal, escodegen, extensions, fs, func, inspect, k, name, path, ref, ref1, relativeResolve, sfs, v, vm,
    hasProp = {}.hasOwnProperty;

  escodegen = require('escodegen');

  fs = require('scopedfs');

  path = require('path');

  vm = require('vm');

  ref = require('assert');
  for (name in ref) {
    func = ref[name];
    global[name] = func;
  }

  egal = function(a, b) {
    if (a === b) {
      return a !== 0 || 1 / a === 1 / b;
    } else {
      return a !== a && b !== b;
    }
  };

  arrayEgal = function(a, b) {
    var el, i, idx, len;
    if (egal(a, b)) {
      return true;
    } else if ((Array.isArray(a)) && Array.isArray(b)) {
      if (a.length !== b.length) {
        return false;
      }
      for (idx = i = 0, len = a.length; i < len; idx = ++i) {
        el = a[idx];
        if (!arrayEgal(el, b[idx])) {
          return false;
        }
      }
      return true;
    }
  };

  inspect = function(o) {
    return (require('util')).inspect(o, false, 2, true);
  };

  global.eq = function(a, b, msg) {
    return ok(egal(a, b), msg != null ? msg : (inspect(a)) + " === " + (inspect(b)));
  };

  global.arrayEq = function(a, b, msg) {
    return ok(arrayEgal(a, b), msg != null ? msg : (inspect(a)) + " === " + (inspect(b)));
  };

  FIXTURES_DIR = path.join(__dirname, 'fixtures');

  sfs = fs.scoped(FIXTURES_DIR);

  sfs.reset = function() {
    fs.rmrfSync(FIXTURES_DIR);
    return fs.mkdirpSync(FIXTURES_DIR);
  };

  sfs.reset();

  ref1 = require('./src/module');
  for (k in ref1) {
    if (!hasProp.call(ref1, k)) continue;
    v = ref1[k];
    global[k] = v;
  }

  global.FIXTURES_DIR = FIXTURES_DIR;

  global.path = path;

  global.escodegen = escodegen;

  global.fs = sfs;

  global.fixtures = function(opts) {
    sfs.reset();
    return sfs.applySync(opts);
  };

  global.bundle = bundle = function(entryPoint, opts) {
    var ref2, root;
    root = path.resolve(FIXTURES_DIR, (ref2 = opts.root) != null ? ref2 : '');
    return escodegen.generate(cjsify(entryPoint, root, opts));
  };

  global.bundleEval = function(entryPoint, opts, env) {
    var global$, key, module$, val;
    if (opts == null) {
      opts = {};
    }
    if (env == null) {
      env = {};
    }
    global$ = env.global;
    if (!global$) {
      global$ = Object.create(null);
      global$.module = {
        exports: global$.exports = Object.create(null)
      };
    }
    for (key in env) {
      if (!hasProp.call(env, key)) continue;
      val = env[key];
      global$[key] = val;
    }
    global$.global = global$;
    module$ = global$.module;
    if (!('export' in opts)) {
      opts["export"] = 'module.exports';
    }
    vm.runInNewContext(bundle(entryPoint, opts), global$, '');
    return module$ != null ? module$.exports : void 0;
  };

  extensions = ['.js', '.coffee'];

  relativeResolve = require('./src/relative-resolve');

  global.resolve = function(givenPath, cwd) {
    var realCwd, resolved;
    if (cwd == null) {
      cwd = '';
    }
    realCwd = path.resolve(path.join(FIXTURES_DIR, cwd));
    resolved = relativeResolve({
      extensions: extensions,
      root: FIXTURES_DIR,
      cwd: realCwd,
      path: givenPath
    });
    return resolved.canonicalName;
  };

}).call(this);

//# sourceMappingURL=test-setup.js.map
